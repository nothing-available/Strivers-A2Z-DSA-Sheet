/* There is a frog on the 1st step of an N stairs long staircase. The frog wants to reach the Nth stair. HEIGHT[i] is
the height of the (i+1)th stair. If Frog jumps from the ith to the jth stair, the energy lost in the jump is given 
by |HEIGHT[i-1] - HEIGHT[j-1] |. If the Frog is on the ith staircase, he can jump either to (i+1)th stair or to (i+2)th
stair. Your task is to find the minimum total energy used by the frog to reach from the 1st stair to the Nth stair.
*/

Recursion
TC - O(2^N) - Because the depth of the recursion tree is $O(N)$ and every node of the tree is branched into 2 - f(n-1) and f(n-2)
SC - O(N) - Recursion stack space

int func(int n, vector<int> &heights)
{
    if(n == 0)    return 0;
    
    int left = func(n-1, heights) + abs(heights[n] - heights[n-1]);
    int right = INT_MAX;
    if(n > 1)
        right = func(n-2, heights) + abs(heights[n] - heights[n-2]);
    
    return min(left, right);
}

int frogJump(int n, vector<int> &heights)
{
    return func(n-1, heights);
}

Memoization
TC - O(N)
SC - O(N) + O(N) - O(N) recursion stack space and O(N) needed for DP array

int func(int n, vector<int> &heights, vector<int> &dp)
{
    if(n == 0)    return 0;
    
    if(dp[n] != -1)    return dp[n];
    
    int left = func(n-1, heights, dp) + abs(heights[n] - heights[n-1]);
    int right = INT_MAX;
    if(n > 1)
        right = func(n-2, heights, dp) + abs(heights[n] - heights[n-2]);
    
    return dp[n] = min(left, right);
}

int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n, -1);
    return func(n-1, heights, dp);
}

Tabulation 
TC - O(N)
SC - O(N) - dp of array

int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n, -1);
    
    dp[0] = 0;
    
    for(int i=1; i<n; i++)
    {
        int left = dp[i-1] + abs(heights[i] - heights[i-1]);
        
        int right = INT_MAX;
        if(i>1)     
            right = dp[i-2] + abs(heights[i] - heights[i-2]);
        
        dp[i] = min(left, right);
    }
    
    return dp[n-1];
}


Space Optimisation
TC - O(N)
SC - O(1)

int frogJump(int n, vector<int> &heights)
{   
    int curr = 0;
    int prev = 0;
    int prev2 = 0;
    
    for(int i=1; i<n; i++)
    {
        int left = prev + abs(heights[i] - heights[i-1]);
        
        int right = INT_MAX;
        if(i>1)     
            right = prev2 + abs(heights[i] - heights[i-2]);
        
        curr = min(left, right);
        
        prev2 = prev;
        prev = curr;
    }
    
    return curr;
}

Detailed Sol - https://takeuforward.org/data-structure/dynamic-programming-frog-jump-dp-3/


